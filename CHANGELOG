Version 0.3.0.6
    Make Area Selection work
    OK   Investigate TreeModels in django
        - https://django-mptt.readthedocs.io/en/latest/overview.html
        - https://django-treebeard.readthedocs.io/en/latest/index.html
        => use mptt
    OK   Investigate Geospatial Packages
        - https://wq.io/wq.db
        - https://django-geoposition.readthedocs.io/en/latest
        => use django-geoposition
    OK  Install packages
        sudo docker-compose run --user=root django pipenv update
        sudo docker-compose build
    OK  Rewrite Area Model (TreeModel)
        name (TreeModel for Country => City)
        adjacent_fks (m2m => Area)
            TreeManytoManyField
            https://django-mptt.readthedocs.io/en/latest/models.html#id20
        geobox_upper (django-geoposition)
        geobox_lower (django-geoposition)
        geobox_center (django-geoposition) (Show in Map)
        def __str__() == name (super | super | name)
        def is_inside() => check geoposition against geobox
        def is_adjacent() => check adjacent fks
    OK   Handle private_profile.current_area
        NO   Write Area Component
    OK   BUGFIXES
        # OK    TODO [version 0.3.0.6]: Footer hide on mobile (fade in possible) SEE: https://getbootstrap.com/docs/4.0/utilities/display/
            OK   Add a top border to better seperate from content
        # OK    TODO [version 0.]: rename position app to something like 'utils'
        # OK    TODO Git ignore media folder
        # OK    TODO [version 0.]: remove staticfiles dir from git
        # OK    TODO [version 0.3.0.6]: Remove unneeded vue components
        # OK    TODO [version 0.]: remove "foundation-sites": "6.2.3" from webpack
    OK   FUTURE FEATURE LIST
        # O    TODO [version 0.]: Changeing interface language triggers reload to effect the interface language.
        # O     TODO [version 0.]: Convert HTML (Bootstrap) to VUE-Bootstrap
        O   Check out nebenan.de

VERSION 0.3.0.5
    Make Language Selection work
    OK  Write Language Model that maps config Language settings
        - lang_code
        - Language
        - Country
        - supported (Bool)
    OK   ModelTranslation for fields: Language & Country
    OK   REST API
    OK  Make language FK
    OK   Rebuild Docker & App
    OK   Setup fixture => Language
    # See: https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-FIXTURE_DIRS
    FIXTURE_DIRS
    OK  Fixture loading possible
    OK   Global Endpoints in Sharezilla.vue
        Possible? Not needed.
    OK   Handle private_profile.language in Profile
        OK   Again bootstrap vue
            => Out-of-the-box: did a complete rebuild of the docker image
        OK Test Language
    OK   Remove Lang from Menu. put profile in the user dropdown. if auth the menu parent is username if anonymous it is Login and Right of it is Sign-Up as a Button
    OK   ShareZilla Icon => to market
    OK   BUGFIXES
        OK   Testimonials Endpoint only get & list and remove the licence from APi
        OK   Image Upload Bugfix. If the system is rebuild the folder has wrong permissions. builtins.PermissionError.
        PermissionError: [Errno 13] Permission denied: '/app/media/profile/10153682046151361_CMoTOVa.jpg'
    OK   FUTURE FEATURE LIST
        # O    TODO [version 0.]: position.Language: Add Flag icon to Language Model
        # O    TODO [version 0.]: position.Language: Check in save if supported = True that the code is present in the config.LANGUAGE Settings
        # O    TODO [version 0.]: rename position app to something like 'utils'
        # O    TODO [version 0.]: remove "foundation-sites": "6.2.3" from webpack
        # O    TODO [version 0.]: remove staticfiles dir from git
        # O    TODO [version 0.]: Add fixture loading to docker build script (all apps) See: https://docs.djangoproject.com/en/dev/ref/settings/#std:setting-FIXTURE_DIRS FIXTURE_DIRS
            O   make private_profile_app_lang default to "English"
        # O     TODO: Add change rights to build script for media
        # O     TODO: !!! Auth System: Store the profile (load in Sharezilla.vue) of the user in Storage, so everything is accessible from the components and no props-passing-madness
        # O     TODO: Make ShareZilla Name & Icon
        # O    TODO [version 0.]: Remove unneeded vue components
        # O    TODO [version 0.]: Footer hide on mobile
        # O    TODO [version 0.]: Convert HTML (Bootstrap) to VUE-Bootstrap
        # O TODO Git ignore media folder

VERSION 0.3.0.4
    OK   BUGFIX Foundation js is not really working. See the menu
        console errors?
        => cdn doesn not deliver the js, but the css
        how to get foundation locally?
        Bad Bad BROKEN
        => Added bootstrap 4 instead
    OK   Rework app for bootstrap
    OK   Display the profile in the frontend
    OK  Make Footer not transparent and spaced
    OK   Two way binding
    OK   Make vue-method to call for the rest api
        OK   REST update()
        AssertionError: The `.update()` method does not support writable nested fields by default.
        django_1    | Write an explicit `.update()` method for serializer `userprofile.api.UserProfileSerializer`, or set `read_only=True` on nested serializer fields.
        NO   Request context...
            The user id is in the <html uid> attribute and fetched when needed
        NO   Make the API Endpoint 'api/myprofile/uid/' not needing the user id
        OK   Handle private_profile.email_reminder
    OK   get the request.context or at least the user.id
        => uid
    OK   Translate (De) Frontend
    OK   Make future feature list for profile
        - Add "Trial/Promotion Paid Account" to subscription
        - Footer <> Section: Make the Section above the footer scrollable to the full height. Currently the fixed-bottom footer overlays a part.
        Current Hack: <section class="container-fluid section-bottom-spacing">
        THAT HACK BREAKS IF: the content is too long...
        - Make the EXTEND SUBSCRIPTION BUTTON functional
        - Upload Button does not change language (BROWSE)

VERSION 0.3.0.3
    Permissions Django Guardian & REST <= Vue/Axios
    OK   Investigate and Implement Permissions (Guardian)
        OK  Investigate DOC
            - http://www.django-rest-framework.org/api-guide/permissions/
            - http://www.django-rest-framework.org/api-guide/permissions/#djangoobjectpermissions
            - https://django-guardian.readthedocs.io/
            - https://github.com/django-guardian/django-guardian
        OK   Define Guardian Permissions for Userprofile
        OK Install
        NO  Add Guardian to Admin
        OK   Integrate Guardian, DRF and Vue/Axios
    OK   Extend Model UserProfile (1to1=> auth.user) into Public, Private, Internal && extend Fields
        OK   Public
            OK Image (media/users)
            OK short bio
        OK   Private
            OK want email reminder (default=True)
            OK interface_language
            OK Main Address (Main Area)
            OK   current_area
        OK   Internal
            OK current subscription type
            OK subscription from
            OK subscription to
    O   REST with Userprofile
        OK   Setup Serializers and viewsets
        OK   Implement Permissions
            PublicProfileViewSet
                OK   auth and anonymous list
            PrivateProfileViewSet
                OK   Retrieve
                Ok   Update
    OK   Define Generic Way for objects and tasks

VERSION 0.3.0.2
    Enable Multi Language Support
    OK   Language support of Code (EN, DE, (PT, ES))
        OK  add userprofile.interface_language
        OK  add userprofile into user admin (StackedInline)
        OK  can not find GNU xgettext
        OK  makemessages,
            Errors, string interpolation => use named args
        OK   Hook userprofile.language to the LocaleMiddleware
        OK   Translate one string and Test if the app changes
            OK   compilemessages
            OK   setting userprofile.language
        OK   Test Anonymous
    OK   Model translations https://github.com/deschler/django-modeltranslation
        https://django-modeltranslation.readthedocs.io
        OK  General Setup
        OK  Admin Integration
            https://django-modeltranslation.readthedocs.io/en/latest/admin.html
            OK  Can I manually order the translation fields?
                seamlessly
        OK  Test with Testimonial Model
            => Showcase in this app
        OK  Rest Integration?
            => seamlessly !!!
    OK Integrate vuex-i18n into system
        https://github.com/dkfbasel/vuex-i18n
        OK   Install vuex-i18n
        OK   Setup vuex-i18n
        OK   Check workflow for translations
        OK   Test with Hardcode Strings in the structural components
        NO   Bind the userprofile.language variable Vue.i18n.set('en')
        OK  On startup the Language Code is interpolated <html lang>
            Later, when the user changes the language
    OK   BUGFIXES:
        OK   Add Profile image into admin user

VERSION 0.3.0.1 [current]
    Test Axios to async load data via REST
    OK   Develop Feedback App with the TestimonialComponent in Vue.js
        OK   Model & Admin & API for Testimonial Component
        OK   TestimonialComponent loads a random testimonial every x minutes and displays it in the footer.
    # OK    TODO [version 0.3]: change the Image save path (media/stuff/ and media/testimonials)
    # OK    TODO [version 0.3]: show image in Admin
    # OK    TODO [version 0.3]: change the Image save path (media/stuff/)
    # OK    TODO [version 0.3]: show image in Admin
    OK   Howto Multi-Lang in django + vue.js? (also, best way for database field translations)
        https://github.com/vuejs/awesome-vue#i18n
        => https://github.com/dkfbasel/vuex-i18n
        => https://github.com/leonardovilarinho/vue-multilanguage
        https://github.com/deschler/django-modeltranslation

VERSION 0.3
    Set up the Frontend Workflow
    OK  Join Sharetype and Stufftype
    OK  Define the 5 Sharing Workflows:
        SW-1    Sharing Request not targeted at a Stuff Entry
                => (PMW) Proximity Notification
                => (SW-5) Sharing Offer of Stuff targeted at a Sharing Request
                    => If sharing request user accepts the sharing offer create Sharing Agreement
                => (SAW) Decline/Negotiation/Accept of Sharing Agreement(Sharing Offer)
                => (RSAW) Review of Sharing Agreement
        SW-2    Sharing Request targeted at a Stuff Entry
                => (UNW) Stuff Owner Notification
                => (SW-5) Sharing Offer of Stuff targeted at a Sharing Request
                    => If sharing request user accepts the sharing offer create Sharing Agreement
                => Decline/Negotiation/Accept of Sharing Agreement(Sharing Offer)
                => Review of Sharing Agreement
        SW-3    Sharing Request targeted at a Sharing Offer
                => (UNW) Sharing Offer Owner Notification
                    => If sharing offer user accepts the sharing request create Sharing Agreement
                => (SAW) Decline/Negotiation/Accept of Sharing Agreement(Sharing Offer)
                => (RSAW) Review of Sharing Agreement
        SW-4    Sharing Offer of Stuff not targeted at a Sharing Request
                => (PMW) Proximity Notification
                => (SW-3) Continue with Sharing Request targeted at a Sharing Offer
        SW-5    Sharing Offer of Stuff targeted at a Sharing Request
                => (UNW) Sharing Request Owner Notification
                    => If sharing request user accepts the sharing offer create Sharing Agreement
                => (SAW) Decline/Negotiation/Accept of Sharing Agreement(Sharing Offer)
                => (RSAW) Review of Sharing Agreement
    OK  Define the Auxilliary Workflows:
        SCW     Stuff Creation Workflow
                => Form: title, image, description, address (userprofile), kind_of_sharing, active (True), Availability for Events
                => Save (=>StuffLibrary), Save and add another (=>SCW), Cancel (Main Page)
        UNW     User Notification
                => A specific user gets a message about an event into the Notification Cue
                => If the user is logged in the message will appear on the interface and marked unread
                => If in the morning the user has unread notifications the user gets an email reminder unless he doesn't want email reminder (userprofile)
        PMW     Proximity Notification
                => All User observing the Area (userprofile) an Request or Offer was made (SW-1 & SW-4) will receive a message in their Notification Cue (which updates every other second).
        SAW     Decline/Negotiation/Accept of Sharing Agreement(Sharing Offer)
                => CRUD Terms by emitting_party (offer_user) and receiving_party (request_user) until all Terms are accepted by both sides and the sharing agreement as a whole is accepted by both parties
                => If the accepted sharing agreement is completed both parties have to mark it as completed
                => Continue with RSAW
        RSAW    Review of Sharing Agreement
                => Both Parties write a review for the sharing agreement
                    - 5 star rating
                    - rating comment
    OK  REST & CRUD & Vue.js Implementations
        OK   SCW     Stuff Creation Workflow
            => Form: title, image, description, address (userprofile), kind_of_sharing, active (True)
            OK   Set up REST API and Filters
                OK   Make Filter on user and active
                O   Implement Area & User Filter
                OK  Implement Search Filter (from drf, not drf-filters)
                OK  Implement Ordering Filter
                OK   Optimize the fields
                    OK   Address interpolate and editable
                    OK   Area Interpolation into Address
                    OK   Sharetype Display Text
                    OK  Time Ago function
            OK  Develop Vue.js Components
                OK   Get Rid of double title (don't put it in the router)
                OK   Test CSS Foundation ... it is loading...
                OK Develop Sharezilla App Layout into Components
                    => https://foundation.zurb.com/sites/docs/xy-grid.html
                    OK   Router View for InterfaceComponent
                    Sharezilla
                        HeaderComponent
                            LogoComponent
                            MainMenuComponent
                        InterfaceComponent <router-view>
                            MarketComponent
                            ProfileComponent
                        FooterComponent
                            FeedbackComponent
                            TestimonialComponent
VERSION 0.2:
    Make Request based System
    OK   Position App
        OK   Area Model & Admin
        OK   Address Model & Admin
    OK   Market App
        OK   Stuff Model & Admin
            # OK    TODO [version 0.2]: Able to offer services as well?
        OK   Sharing Request Model & Admin
        OK   Sharing Offer Model & Admin
    OK   Fix Image Permission Problem for Stuff
        # OK    TODO [version 0.2]: image to app/media/stuff/<name>
        # OK    TODO [version 0.2]: fix permission error 13 --- docker problem?

VERSION 0.1:
    Make basic Bookings possible in the Admin
    OK   Stuff Model
    OK   Booking Model
    OK   Make the Workflow of these Raw Models in the Admin
        OK   CRUD Stuff
            OK  groups (general, location, flags)
            OK  booking inlines
            NO   Set default query set by availability
            OK   Change general availability to active toogle
            OK   Interpolate Location (Country,City) into list display
        OK   CRUD Booking
            OK list display
